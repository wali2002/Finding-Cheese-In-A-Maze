*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.38 Build 9056, Feb 26 2009

    1:  #include <hidef.h>      /* common defines and macros */
    2:  #include "derivative.h" /* derivative-specific definitions */
    3:  #include "main_asm.h"   /* interface to the assembly module */
    4:  #include "lcd.h"
    5:  #include <stdio.h>
    6:  #include "time.h" 
    7:  
    8:  
    9:  void move(void);
   10:  void left(void);
   11:  void right(void);
   12:  void go(int);
   13:  void search(void);
   14:  void update_xy(void);
   15:  void update_dir(char);
   16:  void default_walls(void);
   17:  void make_turn(int,int,int);
   18:  void turn_around();
   19:  void update_yx();
   20:  
   21:  
   22:  char dir='N';
   23:  int x=0,y=0;
   24:  
   25:  
   26:  struct maze
   27:  {
   28:  	int n_wall,s_wall,e_wall,w_wall;
   29:  	int visited;
   30:  
   31:  }m[6][6];
   32:  
   33:  void main(void) 
   34:  {  
*** EVALUATION ***

Function: main
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

   35:                          
   36:    int i,c=0;
  0000 c7           [1]     CLRB  
  0001 87           [1]     CLRA  
  0002 3b           [2]     PSHD  
   37:     initial();   
  0003 160000       [4]     JSR   initial
   38:      
   39:    DDRB = 0x00;            /* Port B Data Dir Reg        */   
  0006 790000       [3]     CLR   _DDRAB:1
   40:    RDRT = 0x00;            /* Reduce drive enabled       */
  0009 790000       [3]     CLR   _RDRT
   41:    PUCR = PUCR|0x02;
  000c 4c0002       [4]     BSET  _PUCR,#2
   42:   
   43:     
   44:    SoftXIRQ = StartAddr;   // Set XIRQ to start of assembly /
  000f fc0000       [3]     LDD   StartAddr
  0012 7c0000       [3]     STD   SoftXIRQ
   45:    
   46:   
   47:    intrNum = 0;
  0015 c7           [1]     CLRB  
  0016 87           [1]     CLRA  
  0017 7c0000       [3]     STD   intrNum
   48:               
   49:    EnableInterrupts;
  001a 10ef         [1]     CLI   
   50:    
   51:    
   52:    /*wait(150);
   53:    wait(150);
   54:    wait(150);
   55:    wait(150);
   56:    wait(150);
   57:    search();
   58:    stop_dead();
   59:    
   60:    
   61:      */
   62:     
   63:     while (1) 
   64:    {  
   65:        while (intrNum == 0); // check for interrupt 
  001c fc0000       [3]     LDD   intrNum
  001f 27fb         [3/1]   BEQ   *-3 ;abs = 001c
   66:         
   67:      wait(1);
  0021 c601         [1]     LDAB  #1
  0023 87           [1]     CLRA  
  0024 160000       [4]     JSR   wait
   68:        switch (intrNum) 
   69:        {
   70:         
   71:          
   72:          default:       // not implemented bits 
   73:             
   74:             
   75:             //printf("%d ",wsns_r());
   76:             
   77:             search();
  0027 160000       [4]     JSR   search
   78:             stop_dead();         
  002a 160000       [4]     JSR   stop_dead
   79:             break;
   80:        }               // end of switch 
   81:        intrNum = 0;    // reset intr num to 0   
  002d c7           [1]     CLRB  
  002e 87           [1]     CLRA  
  002f 7c0000       [3]     STD   intrNum
  0032 20e8         [3]     BRA   *-22 ;abs = 001c
   82:    }            // end of while 
   83:    for(;;) {
   84:      _FEED_COP(); // feeds the dog 
   85:    } // loop forever 
   86:    // please make sure that you never leave main 
   87:  }                                                                     
   88:  
   89:  
   90:  
   91:  /***********************************************
   92:  PACN0 - used for right wheel
   93:  PACN3 - used for left wheel
   94:  To adjust the segment count, change value of i
   95:  ***********************************************/
   96:  void move(void){
*** EVALUATION ***

Function: move
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

   97:     
   98:    int s1=0,s2=0,s3=0;
   99:    unsigned int i=24;      
  0000 c618         [1]     LDAB  #24
  0002 87           [1]     CLRA  
  0003 6caa         [2]     STD   6,-SP
  100:    char buf[25];
  101:    
  102:    reset_cnt();
  0005 160000       [4]     JSR   reset_cnt
  103:    
  104:  
  105:   straighten();
  0008 160000       [4]     JSR   straighten
  106:   mtr_g();
  000b 160000       [4]     JSR   mtr_g
  107:   
  108:    
  109:    while(PACN3<i||PACN0<i){
  000e 2055         [3]     BRA   *+87 ;abs = 0065
  110:         
  111:         if(PACN3>30||PACN0>30)
  0010 d600         [3]     LDAB  _PACN32
  0012 c11e         [1]     CMPB  #30
  0014 225c         [3/1]   BHI   *+94 ;abs = 0072
  0016 d600         [3]     LDAB  _PACN10:1
  0018 c11e         [1]     CMPB  #30
  001a 2256         [3/1]   BHI   *+88 ;abs = 0072
  112:          break;
  113:         
  114:        forward();
  001c 160000       [4]     JSR   forward
  115:        s2=sns_l();
  001f 160000       [4]     JSR   sns_l
  116:        s2=sns_l();
  0022 160000       [4]     JSR   sns_l
  0025 6c84         [2]     STD   4,SP
  117:     
  118:        s3=sns_r();
  0027 160000       [4]     JSR   sns_r
  119:        s3=sns_r();
  002a 160000       [4]     JSR   sns_r
  120:        
  121:        s1=sns_f();
  002d 3b           [2]     PSHD  
  002e 160000       [4]     JSR   sns_f
  122:        s1=sns_f();
  0031 160000       [4]     JSR   sns_f
  0034 6c84         [2]     STD   4,SP
  123:        
  124:        if(s3==0){             //adjust from right side
  0036 ecb1         [3]     LDD   2,SP+
  0038 2606         [3/1]   BNE   *+8 ;abs = 0040
  125:     
  126:        straighten();
  003a 160000       [4]     JSR   straighten
  127:        right_adjust();      
  003d 160000       [4]     JSR   right_adjust
  128:     }
  129:     
  130:     if(s2==0){        //adjust from left side 
  0040 ec84         [3]     LDD   4,SP
  0042 2606         [3/1]   BNE   *+8 ;abs = 004a
  131:     
  132:        straighten();                        
  0044 160000       [4]     JSR   straighten
  133:        left_adjust(); 
  0047 160000       [4]     JSR   left_adjust
  134:     }
  135:     
  136:     if(s1==0){
  004a ec82         [3]     LDD   2,SP
  004c 2611         [3/1]   BNE   *+19 ;abs = 005f
  137:     
  138:        if(PACN0<10||PACN3<10)
  004e d600         [3]     LDAB  _PACN10:1
  0050 c10a         [1]     CMPB  #10
  0052 2506         [3/1]   BCS   *+8 ;abs = 005a
  0054 d600         [3]     LDAB  _PACN32
  0056 c10a         [1]     CMPB  #10
  0058 2418         [3/1]   BCC   *+26 ;abs = 0072
  139:        update_yx();
  005a 160000       [4]     JSR   update_yx
  005d 2013         [3]     BRA   *+21 ;abs = 0072
  140:        
  141:        break;
  142:     }
  143:     
  144:     
  145:        
  146:       // lcd_clear(0x01);
  147:       // sprintf(buf, "Left =%d \n Right=%d",PACN3,PACN0);
  148:       //void)lcd_puts(buf); 
  149:        wait(1);
  005f c601         [1]     LDAB  #1
  0061 87           [1]     CLRA  
  0062 160000       [4]     JSR   wait
  0065 d600         [3]     LDAB  _PACN32
  0067 87           [1]     CLRA  
  0068 ac80         [3]     CPD   0,SP
  006a 25a4         [3/1]   BCS   *-90 ;abs = 0010
  006c d600         [3]     LDAB  _PACN10:1
  006e ac80         [3]     CPD   0,SP
  0070 259e         [3/1]   BCS   *-96 ;abs = 0010
  150:   }    
  151:    
  152:  }
  0072 1b86         [2]     LEAS  6,SP
  0074 3d           [5]     RTS   
  153:  
  154:   
  155:  /***********************************************************
  156:  Makes a left turn and updates the direction of mouse
  157:  ***********************************************************/
  158:  void left(){
*** EVALUATION ***

Function: left
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  159:    
  160:    unsigned int i=12;      
  0000 c60c         [1]     LDAB  #12
  0002 87           [1]     CLRA  
  0003 3b           [2]     PSHD  
  161:    
  162:    //i=(~i+1);
  163:    //PACN0=i;
  164:    //PACN3=i;
  165:     
  166:    
  167:    reset_cnt();
  0004 160000       [4]     JSR   reset_cnt
  168:    turn_left();
  0007 160000       [4]     JSR   turn_left
  169:    mtr_go();
  000a 160000       [4]     JSR   mtr_go
  170:    while(PACN3<i||PACN0<i){
  000d d600         [3]     LDAB  _PACN32
  000f 87           [1]     CLRA  
  0010 ac80         [3]     CPD   0,SP
  0012 25f9         [3/1]   BCS   *-5 ;abs = 000d
  0014 d600         [3]     LDAB  _PACN10:1
  0016 ac80         [3]     CPD   0,SP
  0018 25f3         [3/1]   BCS   *-11 ;abs = 000d
  171:          
  172:        //lcd_clear(0x01);
  173:        //printf("Left =%d \n Right=%d", (PACN3+i), (PACN0+i));
  174:       // (void)lcd_puts(buf); 
  175:       // wait(1);
  176:       
  177:    }           
  178:     
  179:    while(PACN0<i) {
  001a 2003         [3]     BRA   *+5 ;abs = 001f
  180:    //printf("Right=%d", PACN3);
  181:      right_adjust();
  001c 160000       [4]     JSR   right_adjust
  001f d600         [3]     LDAB  _PACN10:1
  0021 87           [1]     CLRA  
  0022 ac80         [3]     CPD   0,SP
  0024 25f6         [3/1]   BCS   *-8 ;abs = 001c
  182:    }
  183:          
  184:    while(PACN3<i)  {
  0026 2003         [3]     BRA   *+5 ;abs = 002b
  185:      //printf("Left =%d",PACN0);
  186:      left_adjust();   
  0028 160000       [4]     JSR   left_adjust
  002b d600         [3]     LDAB  _PACN32
  002d 87           [1]     CLRA  
  002e ac80         [3]     CPD   0,SP
  0030 25f6         [3/1]   BCS   *-8 ;abs = 0028
  187:    }
  188:    update_dir('L');
  0032 c64c         [1]     LDAB  #76
  0034 160000       [4]     JSR   update_dir
  189:    
  190:  }
  0037 3a           [3]     PULD  
  0038 3d           [5]     RTS   
  191:  
  192:  void turn_around(){
*** EVALUATION ***

Function: turn_around
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 1bf1ea       [2]     LEAS  -22,SP
  193:    
  194:    unsigned int i=5; 
  0003 c605         [1]     LDAB  #5
  0005 87           [1]     CLRA  
  0006 6c80         [2]     STD   0,SP
  195:    char buf[20];     
  196:    
  197:    
  198:     reset_cnt();
  0008 160000       [4]     JSR   reset_cnt
  199:    
  200:    straighten();
  000b 160000       [4]     JSR   straighten
  201:    mtr_g();
  000e 160000       [4]     JSR   mtr_g
  202:    while(PACN0<i||PACN0<i) {
  0011 2006         [3]     BRA   *+8 ;abs = 0019
  203:      
  204:      wait(1);
  0013 c601         [1]     LDAB  #1
  0015 87           [1]     CLRA  
  0016 160000       [4]     JSR   wait
  0019 d600         [3]     LDAB  _PACN10:1
  001b 87           [1]     CLRA  
  001c ac80         [3]     CPD   0,SP
  001e 25f3         [3/1]   BCS   *-11 ;abs = 0013
  0020 d600         [3]     LDAB  _PACN10:1
  0022 ac80         [3]     CPD   0,SP
  0024 25ed         [3/1]   BCS   *-17 ;abs = 0013
  205:    }
  206:    
  207:    reset_cnt();
  0026 160000       [4]     JSR   reset_cnt
  208:    i=30;
  0029 c61e         [1]     LDAB  #30
  002b 87           [1]     CLRA  
  002c 6c80         [2]     STD   0,SP
  209:    
  210:    
  211:    turn_left();
  002e 160000       [4]     JSR   turn_left
  212:    mtr_go();
  0031 160000       [4]     JSR   mtr_go
  213:    while(PACN3<i||PACN0<i){
  0034 2029         [3]     BRA   *+43 ;abs = 005f
  214:          
  215:        lcd_clear(0x01);
  0036 c601         [1]     LDAB  #1
  0038 15fb0000     [7]     JSR   [4068,PCR]
  216:        printf("Left =%d \n Right=%d", (PACN3+i), (PACN0+i));
  003c d600         [3]     LDAB  _PACN10:1
  003e 87           [1]     CLRA  
  003f e380         [3]     ADDD  0,SP
  0041 3b           [2]     PSHD  
  0042 d600         [3]     LDAB  _PACN32
  0044 87           [1]     CLRA  
  0045 e382         [3]     ADDD  2,SP
  0047 3b           [2]     PSHD  
  0048 cc0000       [2]     LDD   #"Left =%d \012 Right=%d"
  004b 3b           [2]     PSHD  
  004c 160000       [4]     JSR   printf
  004f 1b86         [2]     LEAS  6,SP
  217:        (void)lcd_puts(buf); 
  0051 1a82         [2]     LEAX  2,SP
  0053 b754         [1]     TFR   X,D
  0055 15fb0000     [7]     JSR   [4070,PCR]
  218:        wait(1);
  0059 c601         [1]     LDAB  #1
  005b 87           [1]     CLRA  
  005c 160000       [4]     JSR   wait
  005f d600         [3]     LDAB  _PACN32
  0061 87           [1]     CLRA  
  0062 ac80         [3]     CPD   0,SP
  0064 25d0         [3/1]   BCS   *-46 ;abs = 0036
  0066 d600         [3]     LDAB  _PACN10:1
  0068 ac80         [3]     CPD   0,SP
  006a 25ca         [3/1]   BCS   *-52 ;abs = 0036
  219:       
  220:    }           
  221:     
  222:    while(PACN0<i) {
  006c 2003         [3]     BRA   *+5 ;abs = 0071
  223:    //printf("Right=%d", PACN3);
  224:      right_adjust();
  006e 160000       [4]     JSR   right_adjust
  0071 d600         [3]     LDAB  _PACN10:1
  0073 87           [1]     CLRA  
  0074 ac80         [3]     CPD   0,SP
  0076 25f6         [3/1]   BCS   *-8 ;abs = 006e
  225:    }
  226:          
  227:    while(PACN3<i)  {
  0078 2003         [3]     BRA   *+5 ;abs = 007d
  228:      //printf("Left =%d",PACN0);
  229:      left_adjust();   
  007a 160000       [4]     JSR   left_adjust
  007d d600         [3]     LDAB  _PACN32
  007f 87           [1]     CLRA  
  0080 ac80         [3]     CPD   0,SP
  0082 25f6         [3/1]   BCS   *-8 ;abs = 007a
  230:    }
  231:    update_dir('L');
  0084 c64c         [1]     LDAB  #76
  0086 160000       [4]     JSR   update_dir
  232:    update_dir('L');
  0089 c64c         [1]     LDAB  #76
  008b 160000       [4]     JSR   update_dir
  233:    //printf(" %c ",dir);
  234:  }
  008e 1bf016       [2]     LEAS  22,SP
  0091 3d           [5]     RTS   
  235:  
  236:  
  237:  
  238:  /***********************************************************
  239:  Makes a right turn and updates the direction of mouse
  240:  ***********************************************************/
  241:  void right(){
*** EVALUATION ***

Function: right
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  242:    
  243:    unsigned int i=12;        
  0000 c60c         [1]     LDAB  #12
  0002 87           [1]     CLRA  
  0003 3b           [2]     PSHD  
  244:    
  245:    
  246:    
  247:    reset_cnt();
  0004 160000       [4]     JSR   reset_cnt
  248:    turn_right();
  0007 160000       [4]     JSR   turn_right
  249:    mtr_go();                 
  000a 160000       [4]     JSR   mtr_go
  250:    
  251:    while(PACN3<i||PACN0<i){
  000d d600         [3]     LDAB  _PACN32
  000f 87           [1]     CLRA  
  0010 ac80         [3]     CPD   0,SP
  0012 25f9         [3/1]   BCS   *-5 ;abs = 000d
  0014 d600         [3]     LDAB  _PACN10:1
  0016 ac80         [3]     CPD   0,SP
  0018 25f3         [3/1]   BCS   *-11 ;abs = 000d
  252:          
  253:        //lcd_clear(0x01);
  254:        //printf("Left =%d \n Right=%d", (PACN3+i), (PACN0+i));
  255:       // (void)lcd_puts(buf); 
  256:       // wait(1);
  257:       
  258:    }           
  259:      
  260:    while(PACN0<i) {
  001a 2003         [3]     BRA   *+5 ;abs = 001f
  261:    //printf("Right=%d", PACN3);
  262:      right_adjust();
  001c 160000       [4]     JSR   right_adjust
  001f d600         [3]     LDAB  _PACN10:1
  0021 87           [1]     CLRA  
  0022 ac80         [3]     CPD   0,SP
  0024 25f6         [3/1]   BCS   *-8 ;abs = 001c
  263:    } 
  264:      
  265:    while(PACN3<i)  {
  0026 2003         [3]     BRA   *+5 ;abs = 002b
  266:      //printf("Left =%d",PACN0);
  267:      left_adjust();   
  0028 160000       [4]     JSR   left_adjust
  002b d600         [3]     LDAB  _PACN32
  002d 87           [1]     CLRA  
  002e ac80         [3]     CPD   0,SP
  0030 25f6         [3/1]   BCS   *-8 ;abs = 0028
  268:    }
  269:    update_dir('R');
  0032 c652         [1]     LDAB  #82
  0034 160000       [4]     JSR   update_dir
  270:    
  271:    
  272:    
  273:    
  274:  }
  0037 3a           [3]     PULD  
  0038 3d           [5]     RTS   
  275:  
  276:  /**********************************************************
  277:  Update x and y based on direction
  278:  **********************************************************/
  279:  
  280:  void update_xy(){
*** EVALUATION ***

Function: update_xy
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  281:   
  282:    switch(dir){
  0000 f60000       [3]     LDAB  dir
  0003 c157         [1]     CMPB  #87
  0005 222b         [3/1]   BHI   *+45 ;abs = 0032
  0007 87           [1]     CLRA  
  0008 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  000b 57           DC.B  87
  000c 27           DC.B  39
  000d 45           DC.B  69
  000e 18           DC.B  24
  000f 4e           DC.B  78
  0010 06           DC.B  6
  0011 53           DC.B  83
  0012 0c           DC.B  12
  0013 57           DC.B  87
  0014 18           DC.B  24
  283:     
  284:      case 'N' : x++;break;
  0015 fe0000       [3]     LDX   x
  0018 08           [1]     INX   
  0019 7e0000       [3]     STX   x
  001c 3d           [5]     RTS   
  285:      case 'S' : x--;break;
  001d fe0000       [3]     LDX   x
  0020 09           [1]     DEX   
  0021 7e0000       [3]     STX   x
  0024 3d           [5]     RTS   
  286:      case 'E' : y++;break;
  0025 fe0000       [3]     LDX   y
  0028 08           [1]     INX   
  0029 2004         [3]     BRA   *+6 ;abs = 002f
  287:      case 'W' : y--;break;
  002b fe0000       [3]     LDX   y
  002e 09           [1]     DEX   
  002f 7e0000       [3]     STX   y
  288:      default: break;
  289:     
  290:     
  291:      
  292:    }
  293:  }
  0032 3d           [5]     RTS   
  294:  
  295:  
  296:  /**********************************************************
  297:  Update x and y based on direction
  298:  **********************************************************/
  299:  
  300:  void update_yx(){
*** EVALUATION ***

Function: update_yx
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  301:   
  302:    switch(dir){
  0000 f60000       [3]     LDAB  dir
  0003 c157         [1]     CMPB  #87
  0005 222b         [3/1]   BHI   *+45 ;abs = 0032
  0007 87           [1]     CLRA  
  0008 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  000b 57           DC.B  87
  000c 27           DC.B  39
  000d 45           DC.B  69
  000e 18           DC.B  24
  000f 4e           DC.B  78
  0010 06           DC.B  6
  0011 53           DC.B  83
  0012 0c           DC.B  12
  0013 57           DC.B  87
  0014 18           DC.B  24
  303:     
  304:      case 'N' : x--;break;
  0015 fe0000       [3]     LDX   x
  0018 09           [1]     DEX   
  0019 7e0000       [3]     STX   x
  001c 3d           [5]     RTS   
  305:      case 'S' : x++;break;
  001d fe0000       [3]     LDX   x
  0020 08           [1]     INX   
  0021 7e0000       [3]     STX   x
  0024 3d           [5]     RTS   
  306:      case 'E' : y--;break;
  0025 fe0000       [3]     LDX   y
  0028 09           [1]     DEX   
  0029 2004         [3]     BRA   *+6 ;abs = 002f
  307:      case 'W' : y++;break;
  002b fe0000       [3]     LDX   y
  002e 08           [1]     INX   
  002f 7e0000       [3]     STX   y
  308:      default: break;
  309:     
  310:     
  311:      
  312:    }
  313:  }
  0032 3d           [5]     RTS   
  314:  
  315:  /*********************************************************
  316:  Update mouse direction based on turn
  317:  *********************************************************/
  318:  void update_dir(char turn){
*** EVALUATION ***

Function: update_dir
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
  319:   
  320:    printf(" %c" , dir);
  0001 f60000       [3]     LDAB  dir
  0004 b715         [1]     SEX   B,X
  0006 34           [2]     PSHX  
  0007 cc0000       [2]     LDD   #" %c"
  000a 3b           [2]     PSHD  
  000b 160000       [4]     JSR   printf
  321:   
  322:   if(turn=='R'){
  000e e6a3         [3]     LDAB  4,+SP
  0010 c152         [1]     CMPB  #82
  0012 2625         [3/1]   BNE   *+39 ;abs = 0039
  323:   
  324:      switch(dir){
  0014 f60000       [3]     LDAB  dir
  0017 c157         [1]     CMPB  #87
  0019 2250         [3/1]   BHI   *+82 ;abs = 006b
  001b 87           [1]     CLRA  
  001c 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  001f 57           DC.B  87
  0020 4c           DC.B  76
  0021 45           DC.B  69
  0022 0e           DC.B  14
  0023 4e           DC.B  78
  0024 06           DC.B  6
  0025 53           DC.B  83
  0026 07           DC.B  7
  0027 57           DC.B  87
  0028 0b           DC.B  11
  325:        case 'N': dir='E';break;
  0029 c645         [1]     LDAB  #69
  002b 8f           [2]     SKIP2 
  326:        case 'S': dir='W';break;
  002c c657         [1]     LDAB  #87
  002e 8f           [2]     SKIP2 
  327:        case 'E': dir='S';break;
  002f c653         [1]     LDAB  #83
  0031 8f           [2]     SKIP2 
  328:        case 'W': dir='N';break;
  0032 c64e         [1]     LDAB  #78
  0034 7b0000       [3]     STAB  dir
  0037 2032         [3]     BRA   *+52 ;abs = 006b
  329:        default:break; 
  330:      }
  331:   } 
  332:   else{
  333:     switch(dir){
  0039 f60000       [3]     LDAB  dir
  003c c157         [1]     CMPB  #87
  003e 221c         [3/1]   BHI   *+30 ;abs = 005c
  0040 87           [1]     CLRA  
  0041 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  0044 57           DC.B  87
  0045 18           DC.B  24
  0046 45           DC.B  69
  0047 0e           DC.B  14
  0048 4e           DC.B  78
  0049 06           DC.B  6
  004a 53           DC.B  83
  004b 07           DC.B  7
  004c 57           DC.B  87
  004d 0b           DC.B  11
  334:        case 'N': dir='W';break;
  004e c657         [1]     LDAB  #87
  0050 8f           [2]     SKIP2 
  335:        case 'S': dir='E';break;
  0051 c645         [1]     LDAB  #69
  0053 8f           [2]     SKIP2 
  336:        case 'E': dir='N';break;
  0054 c64e         [1]     LDAB  #78
  0056 8f           [2]     SKIP2 
  337:        case 'W': dir='S';break;
  0057 c653         [1]     LDAB  #83
  0059 7b0000       [3]     STAB  dir
  338:        default:break; 
  339:   }
  340:    printf(" %c" , dir);
  005c f60000       [3]     LDAB  dir
  005f b715         [1]     SEX   B,X
  0061 34           [2]     PSHX  
  0062 cc0000       [2]     LDD   #" %c"
  0065 3b           [2]     PSHD  
  0066 160000       [4]     JSR   printf
  0069 1b84         [2]     LEAS  4,SP
  341:   
  342:  }
  343:  }
  006b 32           [3]     PULA  
  006c 3d           [5]     RTS   
  344:  
  345:  
  346:  /******************************************************
  347:  Count # of squares searched
  348:  ******************************************************/
  349:  int squares_done(){
*** EVALUATION ***

Function: squares_done
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 1b9a         [2]     LEAS  -6,SP
  350:  
  351:    int count=0,i,j;
  0002 c7           [1]     CLRB  
  0003 87           [1]     CLRA  
  0004 6c84         [2]     STD   4,SP
  352:    
  353:    for(i=0;i<6;i++)
  0006 6c82         [2]     STD   2,SP
  354:      for(j=0;j<6;j++)
  0008 c7           [1]     CLRB  
  0009 87           [1]     CLRA  
  000a 6c80         [2]     STD   0,SP
  355:        count+=m[i][j].visited;
  000c c63c         [1]     LDAB  #60
  000e 87           [1]     CLRA  
  000f ed82         [3]     LDY   2,SP
  0011 13           [3]     EMUL  
  0012 b745         [1]     TFR   D,X
  0014 c60a         [1]     LDAB  #10
  0016 87           [1]     CLRA  
  0017 ed80         [3]     LDY   0,SP
  0019 13           [3]     EMUL  
  001a 1ae6         [2]     LEAX  D,X
  001c ec84         [3]     LDD   4,SP
  001e e3e20000     [4]     ADDD  m:8,X
  0022 6c84         [2]     STD   4,SP
  0024 ee80         [3]     LDX   0,SP
  0026 08           [1]     INX   
  0027 6e80         [2]     STX   0,SP
  0029 8e0006       [2]     CPX   #6
  002c 2dde         [3/1]   BLT   *-32 ;abs = 000c
  002e ee82         [3]     LDX   2,SP
  0030 08           [1]     INX   
  0031 6e82         [2]     STX   2,SP
  0033 8e0006       [2]     CPX   #6
  0036 2dd0         [3/1]   BLT   *-46 ;abs = 0008
  356:        
  357:    return count;      
  358:    
  359:  }
  0038 1b86         [2]     LEAS  6,SP
  003a 3d           [5]     RTS   
  360:  
  361:  /*************************************************
  362:  Assign the walls according to direction of mouse
  363:  *************************************************/
  364:  void assign_walls(){
*** EVALUATION ***

Function: assign_walls
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  365:  
  366:      switch(dir){
  0000 f60000       [3]     LDAB  dir
  0003 c157         [1]     CMPB  #87
  0005 182200c2     [4/3]   LBHI  *+198 ;abs = 00cb
  0009 87           [1]     CLRA  
  000a 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  000d 57           DC.B  87
  000e be           DC.B  190
  000f 45           DC.B  69
  0010 69           DC.B  105
  0011 4e           DC.B  78
  0012 06           DC.B  6
  0013 53           DC.B  83
  0014 38           DC.B  56
  0015 57           DC.B  87
  0016 8b           DC.B  139
  367:  
  368:  	case 'N': m[x][y].e_wall=wsns_r();
  0017 160000       [4]     JSR   assign_walls:0x00df
  001a 160000       [4]     JSR   assign_walls:0x00f2
  001d 6ce20000     [3]     STD   m:4,X
  369:  		  m[x][y].n_wall=sns_f();
  0021 160000       [4]     JSR   assign_walls:0x00cc
  0024 160000       [4]     JSR   assign_walls:0x00f8
  0027 6ce20000     [3]     STD   m,X
  370:  		  m[x][y].w_wall=wsns_l();
  002b 160000       [4]     JSR   assign_walls:0x00cc
  002e 160000       [4]     JSR   assign_walls:0x00fe
  0031 6ce20000     [3]     STD   m:6,X
  371:  		  default_walls();
  0035 160000       [4]     JSR   default_walls
  372:  		  make_turn(m[x][y].e_wall,m[x][y].n_wall,m[x][y].w_wall);
  0038 160000       [4]     JSR   assign_walls:0x00cc
  003b ece20000     [4]     LDD   m:4,X
  003f 3b           [2]     PSHD  
  0040 ece20000     [4]     LDD   m,X
  0044 3b           [2]     PSHD  
  0045 ece20000     [4]     LDD   m:6,X
  373:  		  break;
  0049 207b         [3]     BRA   *+125 ;abs = 00c6
  374:  	case 'S': m[x][y].e_wall=wsns_l();
  004b 160000       [4]     JSR   assign_walls:0x00df
  004e 160000       [4]     JSR   assign_walls:0x00fe
  0051 6ce20000     [3]     STD   m:4,X
  375:  		  m[x][y].w_wall=wsns_r();
  0055 0775         [4]     BSR   *+119 ;abs = 00cc
  0057 160000       [4]     JSR   assign_walls:0x00f2
  005a 6ce20000     [3]     STD   m:6,X
  376:  		  m[x][y].s_wall=sns_f();
  005e 076c         [4]     BSR   *+110 ;abs = 00cc
  0060 160000       [4]     JSR   assign_walls:0x00f8
  0063 160000       [4]     JSR   assign_walls:0x0104
  377:  		  default_walls();
  378:  		  make_turn(m[x][y].w_wall,m[x][y].s_wall,m[x][y].e_wall);
  0066 0764         [4]     BSR   *+102 ;abs = 00cc
  0068 ece20000     [4]     LDD   m:6,X
  006c 3b           [2]     PSHD  
  006d ece20000     [4]     LDD   m:2,X
  0071 3b           [2]     PSHD  
  0072 ece20000     [4]     LDD   m:4,X
  379:  		  break;
  0076 204e         [3]     BRA   *+80 ;abs = 00c6
  380:  	case 'E': m[x][y].e_wall=sns_f();
  0078 0765         [4]     BSR   *+103 ;abs = 00df
  007a 077c         [4]     BSR   *+126 ;abs = 00f8
  007c 6ce20000     [3]     STD   m:4,X
  381:  		  m[x][y].n_wall=wsns_l();
  0080 074a         [4]     BSR   *+76 ;abs = 00cc
  0082 077a         [4]     BSR   *+124 ;abs = 00fe
  0084 6ce20000     [3]     STD   m,X
  382:  		  m[x][y].s_wall=wsns_r();
  0088 0742         [4]     BSR   *+68 ;abs = 00cc
  008a 0766         [4]     BSR   *+104 ;abs = 00f2
  008c 0776         [4]     BSR   *+120 ;abs = 0104
  383:  		  default_walls();
  384:  		  make_turn(m[x][y].s_wall,m[x][y].e_wall,m[x][y].n_wall);
  008e 073c         [4]     BSR   *+62 ;abs = 00cc
  0090 ece20000     [4]     LDD   m:2,X
  0094 3b           [2]     PSHD  
  0095 ece20000     [4]     LDD   m:4,X
  0099 3b           [2]     PSHD  
  009a ece20000     [4]     LDD   m,X
  385:  		  break;
  009e 2026         [3]     BRA   *+40 ;abs = 00c6
  386:  	case 'W': m[x][y].w_wall=sns_f();
  00a0 073d         [4]     BSR   *+63 ;abs = 00df
  00a2 0754         [4]     BSR   *+86 ;abs = 00f8
  00a4 6ce20000     [3]     STD   m:6,X
  387:  		  m[x][y].n_wall=wsns_r();
  00a8 0722         [4]     BSR   *+36 ;abs = 00cc
  00aa 0746         [4]     BSR   *+72 ;abs = 00f2
  00ac 6ce20000     [3]     STD   m,X
  388:  		  m[x][y].s_wall=wsns_l();
  00b0 071a         [4]     BSR   *+28 ;abs = 00cc
  00b2 074a         [4]     BSR   *+76 ;abs = 00fe
  00b4 074e         [4]     BSR   *+80 ;abs = 0104
  389:  		  default_walls();
  390:  		  make_turn(m[x][y].n_wall,m[x][y].w_wall,m[x][y].s_wall);
  00b6 0714         [4]     BSR   *+22 ;abs = 00cc
  00b8 ece20000     [4]     LDD   m,X
  00bc 3b           [2]     PSHD  
  00bd ece20000     [4]     LDD   m:6,X
  00c1 3b           [2]     PSHD  
  00c2 ece20000     [4]     LDD   m:2,X
  00c6 160000       [4]     JSR   make_turn
  00c9 1b84         [2]     LEAS  4,SP
  391:  		  break;
  392:  
  393:  	default: break;
  394:  
  395:  
  396:      }
  397:  
  398:  }
  00cb 3d           [5]     RTS   
  00cc fc0000       [3]     LDD   x
  00cf cd003c       [2]     LDY   #60
  00d2 13           [3]     EMUL  
  00d3 b745         [1]     TFR   D,X
  00d5 fc0000       [3]     LDD   y
  00d8 cd000a       [2]     LDY   #10
  00db 13           [3]     EMUL  
  00dc 1ae6         [2]     LEAX  D,X
  00de 3d           [5]     RTS   
  00df fc0000       [3]     LDD   x
  00e2 cd003c       [2]     LDY   #60
  00e5 13           [3]     EMUL  
  00e6 b745         [1]     TFR   D,X
  00e8 fc0000       [3]     LDD   y
  00eb cd000a       [2]     LDY   #10
  00ee 13           [3]     EMUL  
  00ef 1ae6         [2]     LEAX  D,X
  00f1 3d           [5]     RTS   
  00f2 34           [2]     PSHX  
  00f3 160000       [4]     JSR   wsns_r
  00f6 30           [3]     PULX  
  00f7 3d           [5]     RTS   
  00f8 34           [2]     PSHX  
  00f9 160000       [4]     JSR   sns_f
  00fc 30           [3]     PULX  
  00fd 3d           [5]     RTS   
  00fe 34           [2]     PSHX  
  00ff 160000       [4]     JSR   wsns_l
  0102 30           [3]     PULX  
  0103 3d           [5]     RTS   
  0104 6ce20000     [3]     STD   m:2,X
  0108 060000       [3]     JMP   default_walls
  399:  /*************************************************************************
  400:  Check if a particular cell is visited or not
  401:  *************************************************************************/
  402:  int check_visited(char side){
*** EVALUATION ***

Function: check_visited
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 6ba9         [2]     STAB  7,-SP
  403:  
  404:      int v,i,j;  
  405:  
  406:      i=x;
  0002 fc0000       [3]     LDD   x
  0005 6c85         [2]     STD   5,SP
  407:      j=y;
  0007 fc0000       [3]     LDD   y
  000a 6c83         [2]     STD   3,SP
  408:  
  409:      switch(side){
  000c e680         [3]     LDAB  0,SP
  000e c152         [1]     CMPB  #82
  0010 182200ae     [4/3]   LBHI  *+178 ;abs = 00c2
  0014 c146         [1]     CMPB  #70
  0016 276e         [3/1]   BEQ   *+112 ;abs = 0086
  0018 c14c         [1]     CMPB  #76
  001a 272e         [3/1]   BEQ   *+48 ;abs = 004a
  001c c152         [1]     CMPB  #82
  001e 265c         [3/1]   BNE   *+94 ;abs = 007c
  410:  
  411:  	case 'R'://printf("\n R"); 
  412:  		if(dir=='N')v=m[i][(j+1)].visited;
  0020 f60000       [3]     LDAB  dir
  0023 c14e         [1]     CMPB  #78
  0025 2609         [3/1]   BNE   *+11 ;abs = 0030
  0027 160000       [4]     JSR   check_visited:0x00c7
  002a ece20000     [4]     LDD   m:18,X
  002e 2054         [3]     BRA   *+86 ;abs = 0084
  413:  		  else if(dir=='S')v=m[i][(j-1)].visited;
  0030 c153         [1]     CMPB  #83
  0032 2609         [3/1]   BNE   *+11 ;abs = 003d
  0034 160000       [4]     JSR   check_visited:0x00c7
  0037 ece20000     [4]     LDD   m:-2,X
  003b 2047         [3]     BRA   *+73 ;abs = 0084
  414:  		  else if(dir=='E')v=m[(i-1)][j].visited;
  003d c145         [1]     CMPB  #69
  003f 2605         [3/1]   BNE   *+7 ;abs = 0046
  0041 160000       [4]     JSR   check_visited:0x00c7
  0044 203a         [3]     BRA   *+60 ;abs = 0080
  415:  		  else v=m[(i+1)][j].visited;       
  0046 077f         [4]     BSR   *+129 ;abs = 00c7
  0048 2072         [3]     BRA   *+116 ;abs = 00bc
  416:  	  	break;	
  417:  			
  418:  	case 'L': 
  419:  		if(dir=='N')v=m[i][(j-1)].visited;
  004a f60000       [3]     LDAB  dir
  004d c14e         [1]     CMPB  #78
  004f 2608         [3/1]   BNE   *+10 ;abs = 0059
  0051 0774         [4]     BSR   *+118 ;abs = 00c7
  0053 ece20000     [4]     LDD   m:-2,X
  0057 6c81         [2]     STD   1,SP
  420:  		      if(dir=='S')v=m[i][(j+1)].visited;
  0059 f60000       [3]     LDAB  dir
  005c c153         [1]     CMPB  #83
  005e 2608         [3/1]   BNE   *+10 ;abs = 0068
  0060 0765         [4]     BSR   *+103 ;abs = 00c7
  0062 ece20000     [4]     LDD   m:18,X
  0066 6c81         [2]     STD   1,SP
  421:  		  if(dir=='E')v=m[(i+1)][j].visited;
  0068 f60000       [3]     LDAB  dir
  006b c145         [1]     CMPB  #69
  006d 2608         [3/1]   BNE   *+10 ;abs = 0077
  006f 0756         [4]     BSR   *+88 ;abs = 00c7
  0071 ece20000     [4]     LDD   m:68,X
  0075 6c81         [2]     STD   1,SP
  422:  		  if(dir=='W')v=m[(i-1)][j].visited;  
  0077 f60000       [3]     LDAB  dir
  007a c157         [1]     CMPB  #87
  007c 2644         [3/1]   BNE   *+70 ;abs = 00c2
  007e 0747         [4]     BSR   *+73 ;abs = 00c7
  0080 ece20000     [4]     LDD   m:-52,X
  0084 203a         [3]     BRA   *+60 ;abs = 00c0
  423:  			break;
  424:  
  425:  	case 'F':if(dir=='E')v=m[i][(j+1)].visited;
  0086 f60000       [3]     LDAB  dir
  0089 c145         [1]     CMPB  #69
  008b 2608         [3/1]   BNE   *+10 ;abs = 0095
  008d 0738         [4]     BSR   *+58 ;abs = 00c7
  008f ece20000     [4]     LDD   m:18,X
  0093 6c81         [2]     STD   1,SP
  426:  		     if(dir=='W')v=m[i][(j-1)].visited;
  0095 f60000       [3]     LDAB  dir
  0098 c157         [1]     CMPB  #87
  009a 2608         [3/1]   BNE   *+10 ;abs = 00a4
  009c 0729         [4]     BSR   *+43 ;abs = 00c7
  009e ece20000     [4]     LDD   m:-2,X
  00a2 6c81         [2]     STD   1,SP
  427:  		     if(dir=='S')v=m[(i-1)][j].visited;
  00a4 f60000       [3]     LDAB  dir
  00a7 c153         [1]     CMPB  #83
  00a9 2608         [3/1]   BNE   *+10 ;abs = 00b3
  00ab 071a         [4]     BSR   *+28 ;abs = 00c7
  00ad ece20000     [4]     LDD   m:-52,X
  00b1 6c81         [2]     STD   1,SP
  428:  		     if(dir=='N')v=m[(i+1)][j].visited;  
  00b3 f60000       [3]     LDAB  dir
  00b6 c14e         [1]     CMPB  #78
  00b8 2608         [3/1]   BNE   *+10 ;abs = 00c2
  00ba 070b         [4]     BSR   *+13 ;abs = 00c7
  00bc ece20000     [4]     LDD   m:68,X
  00c0 6c81         [2]     STD   1,SP
  429:  		   break;
  430:  	default: break;
  431:  
  432:  
  433:  
  434:      }
  435:      return v; 
  00c2 ec81         [3]     LDD   1,SP
  436:  
  437:  }
  00c4 1b87         [2]     LEAS  7,SP
  00c6 3d           [5]     RTS   
  00c7 c63c         [1]     LDAB  #60
  00c9 87           [1]     CLRA  
  00ca ed87         [3]     LDY   7,SP
  00cc 13           [3]     EMUL  
  00cd b745         [1]     TFR   D,X
  00cf c60a         [1]     LDAB  #10
  00d1 87           [1]     CLRA  
  00d2 ed85         [3]     LDY   5,SP
  00d4 13           [3]     EMUL  
  00d5 1ae6         [2]     LEAX  D,X
  00d7 3d           [5]     RTS   
  438:  
  439:  /******************************************************
  440:    Assigns the boundries of the maze
  441:   ******************************************************/
  442:  void default_walls(){
*** EVALUATION ***

Function: default_walls
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  443:  
  444:      int i,j;
  445:  
  446:      //Assign the boundries of the maze
  447:      for(i=0;i<6;i++)m[i][0].w_wall=0;
  0000 cd0000       [2]     LDY   #0
  0003 c63c         [1]     LDAB  #60
  0005 87           [1]     CLRA  
  0006 35           [2]     PSHY  
  0007 0740         [4]     BSR   *+66 ;abs = 0049
  0009 6de20000     [3]     STY   m:6,X
  000d 30           [3]     PULX  
  000e 0740         [4]     BSR   *+66 ;abs = 0050
  0010 2df1         [3/1]   BLT   *-13 ;abs = 0003
  448:      for(i=0;i<6;i++)m[i][5].e_wall=0;
  0012 cd0000       [2]     LDY   #0
  0015 c63c         [1]     LDAB  #60
  0017 87           [1]     CLRA  
  0018 35           [2]     PSHY  
  0019 072e         [4]     BSR   *+48 ;abs = 0049
  001b 6de20000     [3]     STY   m:54,X
  001f 30           [3]     PULX  
  0020 072e         [4]     BSR   *+48 ;abs = 0050
  0022 2df1         [3/1]   BLT   *-13 ;abs = 0015
  449:      for(j=0;j<6;j++)m[0][j].s_wall=0;
  0024 cd0000       [2]     LDY   #0
  0027 c60a         [1]     LDAB  #10
  0029 87           [1]     CLRA  
  002a 35           [2]     PSHY  
  002b 071c         [4]     BSR   *+30 ;abs = 0049
  002d 6de20000     [3]     STY   m:2,X
  0031 30           [3]     PULX  
  0032 071c         [4]     BSR   *+30 ;abs = 0050
  0034 2df1         [3/1]   BLT   *-13 ;abs = 0027
  450:      for(j=0;j<6;j++)m[5][j].n_wall=0;
  0036 cd0000       [2]     LDY   #0
  0039 c60a         [1]     LDAB  #10
  003b 87           [1]     CLRA  
  003c 35           [2]     PSHY  
  003d 070a         [4]     BSR   *+12 ;abs = 0049
  003f 6de20000     [3]     STY   m:300,X
  0043 30           [3]     PULX  
  0044 070a         [4]     BSR   *+12 ;abs = 0050
  0046 2df1         [3/1]   BLT   *-13 ;abs = 0039
  451:  
  452:  }
  0048 3d           [5]     RTS   
  0049 13           [3]     EMUL  
  004a b745         [1]     TFR   D,X
  004c cd0000       [2]     LDY   #0
  004f 3d           [5]     RTS   
  0050 08           [1]     INX   
  0051 8e0006       [2]     CPX   #6
  0054 b756         [1]     TFR   X,Y
  0056 3d           [5]     RTS   
  453:  
  454:  /*********************************************************************
  455:  Make a turn right or left based on conditions
  456:  *********************************************************************/
  457:  void make_turn(int r,int f,int l){
*** EVALUATION ***

Function: make_turn
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 6cad         [2]     STD   3,-SP
  458:  
  459:      char turn_made='n';
  0002 c66e         [1]     LDAB  #110
  0004 6b82         [2]     STAB  2,SP
  460:                      
  461:  
  462:  
  463:      if(r!=0){
  0006 ec87         [3]     LDD   7,SP
  0008 270f         [3/1]   BEQ   *+17 ;abs = 0019
  464:  	if(check_visited('R')==0) {
  000a c652         [1]     LDAB  #82
  000c 160000       [4]     JSR   check_visited
  000f 046407       [3]     TBNE  D,*+10 ;abs = 0019
  465:  	  //  printf(" Current direction = %c ", dir);
  466:  	    right();
  0012 160000       [4]     JSR   right
  467:  //	    printf(" Right ");
  468:  
  469:  	    turn_made='y';  //Mark turn_made so no further turn is made     
  0015 c679         [1]     LDAB  #121
  0017 6b82         [2]     STAB  2,SP
  470:  	}
  471:      }
  472:  
  473:      //Go front if no wall in front and no wall on right or right side cell was not visited
  474:      if(f!=0 && turn_made=='n'){
  0019 ec85         [3]     LDD   5,SP
  001b 2710         [3/1]   BEQ   *+18 ;abs = 002d
  001d 0757         [4]     BSR   *+89 ;abs = 0076
  001f 260c         [3/1]   BNE   *+14 ;abs = 002d
  475:  	if(check_visited('F')==0) {
  0021 c646         [1]     LDAB  #70
  0023 160000       [4]     JSR   check_visited
  0026 046404       [3]     TBNE  D,*+7 ;abs = 002d
  476:  	   // printf(" front ");
  477:  	    turn_made='y';  //Mark turn_made so no further turn is made in this loop
  0029 c679         [1]     LDAB  #121
  002b 6b82         [2]     STAB  2,SP
  478:  	}
  479:      }
  480:  
  481:      //Make a left turn if there is no wall on left + cell on left was not visited before + no turns were made before
  482:      if(l!=0 && turn_made=='n'){
  002d ec80         [3]     LDD   0,SP
  002f 2713         [3/1]   BEQ   *+21 ;abs = 0044
  0031 0743         [4]     BSR   *+69 ;abs = 0076
  0033 260f         [3/1]   BNE   *+17 ;abs = 0044
  483:  	if(check_visited('L')==0) {
  0035 c64c         [1]     LDAB  #76
  0037 160000       [4]     JSR   check_visited
  003a 046407       [3]     TBNE  D,*+10 ;abs = 0044
  484:  //	    printf(" Left ");
  485:  	    left();
  003d 160000       [4]     JSR   left
  486:  	    turn_made='y';  //Mark turn_made so no further turn is made     
  0040 c679         [1]     LDAB  #121
  0042 6b82         [2]     STAB  2,SP
  487:  	}
  488:      }
  489:  
  490:      //Turn right if no wall on right and all adjacent cells were visited
  491:      if(r!=0&&turn_made=='n'){
  0044 ec87         [3]     LDD   7,SP
  0046 270b         [3/1]   BEQ   *+13 ;abs = 0053
  0048 072c         [4]     BSR   *+46 ;abs = 0076
  004a 2607         [3/1]   BNE   *+9 ;abs = 0053
  492:  	//printf("sdf");
  493:  	right();
  004c 160000       [4]     JSR   right
  494:  	turn_made='y';
  004f c679         [1]     LDAB  #121
  0051 6b82         [2]     STAB  2,SP
  495:      }
  496:  
  497:      //Go front if no wall in front and all adjacent cells were visited
  498:      if(f!=0&&turn_made=='n'){
  0053 ec85         [3]     LDD   5,SP
  0055 2708         [3/1]   BEQ   *+10 ;abs = 005f
  0057 071d         [4]     BSR   *+31 ;abs = 0076
  0059 2604         [3/1]   BNE   *+6 ;abs = 005f
  499:  	turn_made='y'; 
  005b c679         [1]     LDAB  #121
  005d 6b82         [2]     STAB  2,SP
  500:      }
  501:  
  502:      //Go left if no wall on left and all adjacent cells were visited
  503:      if(l!=0&&turn_made=='n'){
  005f ec80         [3]     LDD   0,SP
  0061 2709         [3/1]   BEQ   *+11 ;abs = 006c
  0063 0711         [4]     BSR   *+19 ;abs = 0076
  0065 2605         [3/1]   BNE   *+7 ;abs = 006c
  504:  	left();
  0067 160000       [4]     JSR   left
  006a 2007         [3]     BRA   *+9 ;abs = 0073
  505:  	turn_made='y';  
  506:      }
  507:      
  508:      //Turn around if it's a dead end(i.e walls on all 3 sides) and no turns were made      
  509:      if(turn_made=='n'){
  006c 0708         [4]     BSR   *+10 ;abs = 0076
  006e 2603         [3/1]   BNE   *+5 ;abs = 0073
  510:  	turn_around();
  0070 160000       [4]     JSR   turn_around
  511:  	turn_made=='y';
  512:      }
  513:  
  514:  
  515:  }
  0073 1b83         [2]     LEAS  3,SP
  0075 3d           [5]     RTS   
  0076 e684         [3]     LDAB  4,SP
  0078 c16e         [1]     CMPB  #110
  007a 3d           [5]     RTS   
  516:  
  517:  
  518:  
  519:  
  520:  
  521:  
  522:  /*************************************************************************
  523:  Searches the maze
  524:  Basic Algorithm : Go right first if possible
  525:                if not right go front if possible
  526:                  if not front then go left if possible
  527:                    else turn around
  528:  *************************************************************************/
  529:  void search(){
*** EVALUATION ***

Function: search
Source  : H:\Sem6\Mouse\XXXIII squares\Sources\main.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=H:\Sem6\Mouse\XXXIII squares;H:\Sem6\Mouse\XXXIII squares\bin;H:\Sem6\Mouse\XXXIII squares\prm;H:\Sem6\Mouse\XXXIII squares\cmd;H:\Sem6\Mouse\XXXIII squares\Sources;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"OBJPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Env"TEXTPATH=H:\Sem6\Mouse\XXXIII squares\bin" -Lasm=%n.lst -Ms -ObjN="H:\Sem6\Mouse\XXXIII squares\Post_Bench_Test_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 1bf1e5       [2]     LEAS  -27,SP
  530:  
  531:    int i,j;
  532:    int r,f,l;
  533:    char turn_made='n',buf[20];
  0003 cc4e6e       [2]     LDD   #20078
  0006 6b86         [2]     STAB  6,SP
  534:    dir='N';
  0008 7a0000       [3]     STAA  dir
  535:    x=0;y=0;
  000b c7           [1]     CLRB  
  000c 87           [1]     CLRA  
  000d 7c0000       [3]     STD   x
  0010 7c0000       [3]     STD   y
  536:    
  537:    
  538:    reset_cnt();
  0013 160000       [4]     JSR   reset_cnt
  539:    straighten();
  0016 160000       [4]     JSR   straighten
  540:    mtr_g();
  0019 160000       [4]     JSR   mtr_g
  541:    while(PACN0<3||PACN0<3) {
  001c 2006         [3]     BRA   *+8 ;abs = 0024
  542:      
  543:      wait(1);
  001e c601         [1]     LDAB  #1
  0020 87           [1]     CLRA  
  0021 160000       [4]     JSR   wait
  0024 d600         [3]     LDAB  _PACN10:1
  0026 c103         [1]     CMPB  #3
  0028 25f4         [3/1]   BCS   *-10 ;abs = 001e
  002a d600         [3]     LDAB  _PACN10:1
  002c c103         [1]     CMPB  #3
  002e 25ee         [3/1]   BCS   *-16 ;abs = 001e
  544:    }
  545:      
  546:    default_walls();
  0030 160000       [4]     JSR   default_walls
  547:    
  548:    //No cell is visited intially
  549:    for(i=0;i<6;i++)
  0033 c7           [1]     CLRB  
  0034 87           [1]     CLRA  
  0035 6c84         [2]     STD   4,SP
  550:      for(j=0;j<6;j++)
  0037 c7           [1]     CLRB  
  0038 87           [1]     CLRA  
  0039 6c82         [2]     STD   2,SP
  551:          m[i][j].visited=0;
  003b c63c         [1]     LDAB  #60
  003d 87           [1]     CLRA  
  003e ed84         [3]     LDY   4,SP
  0040 13           [3]     EMUL  
  0041 b745         [1]     TFR   D,X
  0043 c60a         [1]     LDAB  #10
  0045 87           [1]     CLRA  
  0046 ed82         [3]     LDY   2,SP
  0048 13           [3]     EMUL  
  0049 1ae6         [2]     LEAX  D,X
  004b c7           [1]     CLRB  
  004c 87           [1]     CLRA  
  004d 6ce20000     [3]     STD   m:8,X
  0051 ee82         [3]     LDX   2,SP
  0053 08           [1]     INX   
  0054 6e82         [2]     STX   2,SP
  0056 8e0006       [2]     CPX   #6
  0059 2de0         [3/1]   BLT   *-30 ;abs = 003b
  005b ee84         [3]     LDX   4,SP
  005d 08           [1]     INX   
  005e 6e84         [2]     STX   4,SP
  0060 8e0006       [2]     CPX   #6
  0063 2dd2         [3/1]   BLT   *-44 ;abs = 0037
  552:    
  553:   assign_walls();   
  554:   while(squares_done()<34)     //Go on until 33 squares are done
  0065 2056         [3]     BRA   *+88 ;abs = 00bd
  555:   {
  556:    
  557:    lcd_clear(0x01);
  0067 c601         [1]     LDAB  #1
  0069 15fb0000     [7]     JSR   [4068,PCR]
  558:    sprintf(buf, "Cell= %d , %d", x, y);
  006d fc0000       [3]     LDD   y
  0070 3b           [2]     PSHD  
  0071 fc0000       [3]     LDD   x
  0074 3b           [2]     PSHD  
  0075 cc0000       [2]     LDD   #"Cell= %d , %d"
  0078 3b           [2]     PSHD  
  0079 1a8d         [2]     LEAX  13,SP
  007b 34           [2]     PSHX  
  007c 6e88         [2]     STX   8,SP
  007e 160000       [4]     JSR   sprintf
  559:    (void)lcd_puts(buf); 
  0081 eca7         [3]     LDD   8,+SP
  0083 15fb0000     [7]     JSR   [4070,PCR]
  560:    wait(1);
  0087 c601         [1]     LDAB  #1
  0089 87           [1]     CLRA  
  008a 160000       [4]     JSR   wait
  561:    
  562:    printf("1st Cell = %d , %d ",x,y);
  008d fc0000       [3]     LDD   y
  0090 3b           [2]     PSHD  
  0091 fc0000       [3]     LDD   x
  0094 3b           [2]     PSHD  
  0095 cc0000       [2]     LDD   #"1st Cell = %d , %d "
  0098 3b           [2]     PSHD  
  0099 160000       [4]     JSR   printf
  009c 1b86         [2]     LEAS  6,SP
  563:    
  564:    move();
  009e 160000       [4]     JSR   move
  565:    m[x][y].visited=1;        //Mark last visited cell.  
  00a1 fc0000       [3]     LDD   x
  00a4 cd003c       [2]     LDY   #60
  00a7 13           [3]     EMUL  
  00a8 b745         [1]     TFR   D,X
  00aa fc0000       [3]     LDD   y
  00ad cd000a       [2]     LDY   #10
  00b0 13           [3]     EMUL  
  00b1 1ae6         [2]     LEAX  D,X
  00b3 c601         [1]     LDAB  #1
  00b5 87           [1]     CLRA  
  00b6 6ce20000     [3]     STD   m:8,X
  566:    update_xy();
  00ba 160000       [4]     JSR   update_xy
  567:     
  568:    assign_walls();
  00bd 160000       [4]     JSR   assign_walls
  00c0 160000       [4]     JSR   squares_done
  00c3 8c0022       [2]     CPD   #34
  00c6 2d9f         [3/1]   BLT   *-95 ;abs = 0067
  569:    
  570:    
  571:   }
  572:    stop_dead();  
  00c8 160000       [4]     JSR   stop_dead
  573:    
  574:  }
  00cb 1bf01b       [2]     LEAS  27,SP
  00ce 3d           [5]     RTS   
  575:  
  576:  
  577:  
  578:  
  579:  
  580:  
  581:  
